using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.DirectoryServices;
using System.DirectoryServices.ActiveDirectory;
using System.Management;
using Microsoft.Win32;

namespace WinInventory
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void getKeys(object sender, RoutedEventArgs e)
        {
            List<string> devices = getTargetDevices();

        }

        private List<string> getTargetDevices()
        {
            List<string> targetDevices = new List<string>();
            DirectorySearcher ds = new DirectorySearcher();
            ds.Filter = ("(objectClass=computer)");

            foreach (SearchResult item in ds.FindAll())
            {
                String osVersion = item.GetDirectoryEntry().Properties["operatingSystemVersion"].Value.ToString();

                if (this.win63.IsChecked == true && osVersion.Equals("6.3 (9600)"))
                { 
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win62.IsChecked == true && osVersion.Equals("6.2 (9200)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win61.IsChecked == true && osVersion.Equals("6.1 (7601)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win60.IsChecked == true && osVersion.Equals("6.0 (6000)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
            }
            return targetDevices;
        }

        private string getProductKey(string product, string computername)
        {
            string productkey = "";
            ManagementScope scope = CreateNewManagementScope(computername);

            if (product.Contains("win"))
            {
                SelectQuery query = new SelectQuery("select SerialNumber from Win32_OperatingSystem");

                try
                {
                    using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(scope, query))
                    {
                        ManagementObjectCollection objects = searcher.Get();

                        string serialnumber = (from ManagementObject o in objects select o["Caption"].ToString()).ToString();
                        productkey = decodeWindowsProductID(serialnumber, product.Substring(3));
                    }
                }
                catch (Exception exception)
                {
                    productkey = "Could not decode product key: " + exception.Message;
                }
            }
            return productkey;
        }

        private ManagementScope CreateNewManagementScope(string server)
        {
            string serverString = @"\\" + server + @"\root\cimv2";

            ManagementScope scope = new ManagementScope(serverString);

            /*if (!chkUseCurrentUser.Checked)
            {
                ConnectionOptions options = new ConnectionOptions
                {
                    Username = txtUsername.Text,
                    Password = txtPassword.Text,
                    Impersonation = ImpersonationLevel.Impersonate,
                    Authentication = AuthenticationLevel.PacketPrivacy
                };
                scope.Options = options;
            }*/

            return scope;
        }
    
        private static string decodeWindowsProductID() {
            RegistryKey digitalProductId = OpenRemoteBaseKey();
            return productkey;
        }
    }
}
