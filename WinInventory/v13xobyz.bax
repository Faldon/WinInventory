using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.DirectoryServices;
using System.DirectoryServices.ActiveDirectory;
using System.Management;
using System.IO;
using System.Security;
using Microsoft.Win32;

namespace WinInventory
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Dictionary<String, Dictionary<String, String>> productKeyCollection = new Dictionary<string, Dictionary<string, string>>();

        public MainWindow()
        {
            InitializeComponent();
        }

        private void getKeys(object sender, RoutedEventArgs e)
        {
            List<string> devices = getTargetDevices();
            List<string> notReachableDevices = new List<string>();
            if (devices.Count == 0) 
            { 
                getTargetDevices(true);
                foreach (string computername in devices)
                {
                    Dictionary<string, string> productKeys = new Dictionary<string, string>();
                    productKeyCollection.Add(computername, productKeys);
                }
            }
            else
            {
                foreach (string computername in devices)
                {
                    Dictionary<string, string> productKeys = new Dictionary<string, string>();
                    try
                    {
                        productKeys.Concat(getProductKeys("win", 0, computername)).ToDictionary(el => el.Key, el => el.Value);
                        productKeyCollection.Add(computername, productKeys);
                    }
                    catch (IOException ioex)
                    {
                        notReachableDevices.Add(computername);
                    }  
                }
            }
            devices.RemoveAll(device => notReachableDevices.Contains(device));
            IEnumerable<CheckBox> c = picker.Children.OfType<CheckBox>();
            foreach (CheckBox cb in c)
            {
                if (cb.IsChecked == true && cb.Name.Contains("mso"))
                {
                    foreach (string computername in devices)
                    {   
                        try
                        {
                            Dictionary<string, string> productKeys = getProductKeys("mso", Int32.Parse(cb.Name.Substring(3)), computername);
                            productKeyCollection[computername] = productKeyCollection[computername].Concat(productKeys).ToDictionary(el => el.Key, el => el.Value);
                        }
                        catch
                        {

                        }
                    }
                }
            }

            this.devicename.ItemsSource = devices;
            this.devicename.SelectedIndex = 1;
            this.devicename.Visibility = System.Windows.Visibility.Visible;

        }

        private void displayDetails(object sender, RoutedEventArgs e)
        {
            ComboBox selection = (ComboBox)sender;
            result.ItemsSource = productKeyCollection[(string)selection.SelectedItem];
        }

        private List<string> getTargetDevices(bool all=false)
        {
            List<string> targetDevices = new List<string>();
            DirectorySearcher ds = new DirectorySearcher();
            ds.Filter = ("(objectClass=computer)");

            foreach (SearchResult item in ds.FindAll())
            {
                if(all)
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                    continue;
                }
                
                String osVersion = item.GetDirectoryEntry().Properties["operatingSystemVersion"].Value.ToString();

                if (this.win63.IsChecked == true && osVersion.Equals("6.3 (9600)"))
                { 
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win62.IsChecked == true && osVersion.Equals("6.2 (9200)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win61.IsChecked == true && osVersion.Equals("6.1 (7601)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win60.IsChecked == true && osVersion.Equals("6.0 (6000)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
            }
            return targetDevices;
        }
    
        private static Dictionary<String, String> getProductKeys(string product, int version, string computername)
        {
            Dictionary<String, String> productkeys = new Dictionary<string,string>();
            string productname;
            byte[] digitalProductId;
            RegistryKey key;
            key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computername, RegistryView.Registry64);
            try
            {
                switch (product)
                {
                    case "win":
                        key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
                        productname = (string)key.GetValue("ProductName");
                        digitalProductId = (byte[])key.GetValue("DigitalProductId");
                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                        break;
                    case "mso":
                        switch (version)
                        {
                            case 11:
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Office\11.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                key = key.OpenSubKey(@"SOFTWARE\wow6432node\Microsoft\Office\11.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                break;
                            case 12:
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Office\12.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                key = key.OpenSubKey(@"SOFTWARE\wow6432node\Microsoft\Office\12.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                break;
                            case 14:
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Office\14.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                key = key.OpenSubKey(@"SOFTWARE\wow6432node\Microsoft\Office\14.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                break;
                            case 15:
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Office\15.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                key = key.OpenSubKey(@"SOFTWARE\wow6432node\Microsoft\Office\15.0\Registration", false);
                                if (key != null)
                                {
                                    for (int i = 0; i < key.GetSubKeyNames().Length; i++)
                                    {
                                        productname = (string)key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("ConvertToEdition");
                                        digitalProductId = (byte[])key.OpenSubKey(key.GetSubKeyNames()[i], false).GetValue("DigitalProductId");
                                        productkeys.Add(productname, decodeMicrosoftProductID(digitalProductId));
                                    }
                                }
                                break;
                        }
                        break;
                }
            }
            catch
            {

            }
            return productkeys;
        }

        private static string decodeMicrosoftProductID(byte[] digitalProductId) {
            if(digitalProductId == null)
            {
                return "Product key not available.";
            }

            String productkey;
            const int KeyOffset = 52;
            string Chars = "BCDFGHJKMPQRTVWXY2346789";
            try
            {
                byte isWin8 = (byte)((digitalProductId[66] / 6) & 1);
                digitalProductId[66] = (byte)((digitalProductId[66] & 0xF7) | ((isWin8 & 2) * 4));
                int iteration = 24;
                string keyoutput = "";
                int last = 0;
                do
                { 
                    int current = 0;
                    int X = 14;
                    do
                    {
                        current = current * 256;
                        current = digitalProductId[X + KeyOffset] + current;
                        digitalProductId[X + KeyOffset] = (byte)(current / 24);
                        current = current%24;
                        --X;
                    }
                    while(X>=0);
                    iteration--;
                    keyoutput = Chars.Substring(current,1) + keyoutput;             
                    last = current;
                }
                while(iteration>=0);
                if (isWin8 == 1)
                {
                    string keypart1 = keyoutput.Substring(1, last);
                    keyoutput = keyoutput.Substring(1);
                    int pos = keyoutput.IndexOf(keypart1, StringComparison.OrdinalIgnoreCase);
                    if (pos > -1)
                    {
                        keyoutput = keyoutput.Substring(0, pos) + keypart1 + "N" + keyoutput.Substring(pos+keypart1.Length);
                    }
                    if (last == 0) 
                    {
                        keyoutput = "N" + keyoutput;
                    }
                }
                String a = keyoutput.Substring(0, 5);
                String b = keyoutput.Substring(5, 5);
                String c = keyoutput.Substring(10, 5);
                String d = keyoutput.Substring(15, 5);
                String e = keyoutput.Substring(20, 5);
                
                productkey = a + "-" + b + "-" + c + "-" + d + "-" + e;
            }
            catch (IOException e)
            {
                productkey = e.Message + "\nHint: Remote Registry Service has to be enabled.";
            }
            catch (SecurityException e)
            {
                productkey = e.Message;
            }
            catch (UnauthorizedAccessException e)
            {
                productkey = e.Message;
            }
            catch (Exception e)
            {
                productkey = "Unspecified error occured.\n" + e.Message;
            }
            return productkey;
        }

        private void devicename_Selected(object sender, RoutedEventArgs e)
        {

        }
    }
}
