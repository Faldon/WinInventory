using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.DirectoryServices;
using System.DirectoryServices.ActiveDirectory;
using System.Management;
using System.IO;
using System.Security;
using Microsoft.Win32;

namespace WinInventory
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void getKeys(object sender, RoutedEventArgs e)
        {
            List<string> devices = getTargetDevices();

        }

        private List<string> getTargetDevices()
        {
            List<string> targetDevices = new List<string>();
            DirectorySearcher ds = new DirectorySearcher();
            ds.Filter = ("(objectClass=computer)");

            foreach (SearchResult item in ds.FindAll())
            {
                String osVersion = item.GetDirectoryEntry().Properties["operatingSystemVersion"].Value.ToString();

                if (this.win63.IsChecked == true && osVersion.Equals("6.3 (9600)"))
                { 
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win62.IsChecked == true && osVersion.Equals("6.2 (9200)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win61.IsChecked == true && osVersion.Equals("6.1 (7601)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
                if (this.win60.IsChecked == true && osVersion.Equals("6.0 (6000)"))
                {
                    targetDevices.Add(item.GetDirectoryEntry().Properties["dNSHostName"].Value.ToString());
                }
            }
            return targetDevices;
        }
    
        private static string decodeMicrosoftProductID(string product, int version, string computername) {
            String productkey;
            
            const int KeyOffset = 52;
            string Chars = "BCDFGHJKMPQRTVWXY2346789";
            try
            {
                switch (product)
                {
                    case "win":
                        RegistryKey key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computername, RegistryView.Registry64);
                        key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
                        break;
                    case "mso":
                        switch(version)
                        {
                            case 11:
                                RegistryKey key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computername, RegistryView.Registry64);
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Office\11.0\Registration", false);
                                break;
                            case 12:
                                RegistryKey key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computername, RegistryView.Registry64);
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
                                break;
                            case 14:
                                RegistryKey key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computername, RegistryView.Registry64);
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
                                break;
                            case 15:
                                RegistryKey key = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, computername, RegistryView.Registry64);
                                key = key.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion", false);
                                break;
                        }
                }

                byte[] digitalProductId = (byte[]) key.GetValue("DigitalProductId");

                byte isWin8 = (byte)((digitalProductId[66] / 6) & 1);
                digitalProductId[66] = (byte)((digitalProductId[66] & 0xF7) | ((isWin8 & 2) * 4));
                int iteration = 24;
                string keyoutput = "";
                int last = 0;
                do
                { 
                    int current = 0;
                    int X = 14;
                    do
                    {
                        current = current * 256;
                        current = digitalProductId[X + KeyOffset] + current;
                        digitalProductId[X + KeyOffset] = (byte)(current / 24);
                        current = current%24;
                        --X;
                    }
                    while(X>=0);
                    iteration--;
                    keyoutput = Chars.Substring(current,1) + keyoutput;             
                    last = current;
                }
                while(iteration>=0);
                if (isWin8 == 1)
                {
                    string keypart1 = keyoutput.Substring(1, last);
                    keyoutput = keyoutput.Substring(1);
                    int pos = keyoutput.IndexOf(keypart1, StringComparison.OrdinalIgnoreCase);
                    if (pos > -1)
                    {
                        keyoutput = keyoutput.Substring(0, pos) + keypart1 + "N" + keyoutput.Substring(pos+keypart1.Length);
                    }
                    if (last == 0) 
                    {
                        keyoutput = "N" + keyoutput;
                    }
                }
                String a = keyoutput.Substring(0, 5);
                String b = keyoutput.Substring(5, 5);
                String c = keyoutput.Substring(10, 5);
                String d = keyoutput.Substring(15, 5);
                String e = keyoutput.Substring(20, 5);
                
                productkey = a + "-" + b + "-" + c + "-" + d + "-" + e;
            }
            catch (IOException e)
            {
                productkey = "The computer " + computername + " could not be found.\n" + e.Message;
            }
            catch (SecurityException e)
            {
                productkey = "Administrative permissions required.\n" + e.Message;
            }
            catch (UnauthorizedAccessException e)
            {
                productkey = "No access to registry on " + computername +".\n" + e.Message;
            }
            catch (Exception e)
            {
                productkey = "Unspecified error occured.\n" + e.Message;
            }
            return productkey;
        }
    }
}
